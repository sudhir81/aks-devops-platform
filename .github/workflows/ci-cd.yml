name: üöÄ AKS DevOps Platform CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sample-app
      CHART_PATH: charts/sample-app
      RELEASE_NAME: sample-app
      K8S_NAMESPACE: default
      ENV_PATH: envs/dev

    steps:
      # -----------------------------
      # Checkout Code
      # -----------------------------
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # -----------------------------
      # Validate Secrets
      # -----------------------------
      - name: üß† Validate Required Secrets
        run: |
          echo "üîç Validating required secrets..."
          for s in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID ACR_NAME AKS_CLUSTER_NAME AKS_RESOURCE_GROUP; do
            if [ -z "${{ secrets[$s] }}" ]; then
              echo "‚ùå Missing secret: $s"
              exit 1
            fi
            echo "‚úÖ $s found"
          done

      # -----------------------------
      # Azure Login (OIDC)
      # -----------------------------
      - name: üîê Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------------
      # Ensure AKS Role Assignment
      # -----------------------------
      - name: üîë Ensure AKS Cluster Admin Role
        run: |
          SP_ID=${{ secrets.AZURE_CLIENT_ID }}
          RG_NAME=${{ secrets.AKS_RESOURCE_GROUP }}
          AKS_NAME=${{ secrets.AKS_CLUSTER_NAME }}
          
          AKS_ID=$(az aks show --name "$AKS_NAME" --resource-group "$RG_NAME" --query id -o tsv)
          echo "üß© AKS Resource ID: $AKS_ID"

          ROLE_EXISTS=$(az role assignment list \
            --assignee "$SP_ID" \
            --scope "$AKS_ID" \
            --query "[?roleDefinitionName=='Azure Kubernetes Service RBAC Cluster Admin'] | length(@)" -o tsv)

          if [ "$ROLE_EXISTS" -eq 0 ]; then
            echo "‚ö†Ô∏è Assigning AKS RBAC Cluster Admin..."
            az role assignment create \
              --assignee "$SP_ID" \
              --role "Azure Kubernetes Service RBAC Cluster Admin" \
              --scope "$AKS_ID"
          else
            echo "‚úÖ Role already assigned."
          fi

      # -----------------------------
      # Setup Terraform
      # -----------------------------
      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # -----------------------------
      # Terraform Init
      # -----------------------------
      - name: ‚öôÔ∏è Terraform Init
        run: |
          for i in {1..3}; do
            echo "üöÄ Terraform init (attempt $i)..."
            if terraform -chdir=${{ env.ENV_PATH }} init -input=false; then
              echo "‚úÖ Terraform init successful"
              break
            fi
            echo "‚ö†Ô∏è Retry in 10s..."
            sleep 10
            if [ "$i" -eq 3 ]; then
              echo "‚ùå Init failed after 3 attempts"
              exit 1
            fi
          done
        env:
          ARM_USE_OIDC: true
          ARM_SKIP_CLI_CREDENTIAL: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------------
      # Terraform Plan
      # -----------------------------
      - name: üßÆ Terraform Plan
        run: |
          for i in {1..3}; do
            echo "üßÆ Terraform plan (attempt $i)..."
            if terraform -chdir=${{ env.ENV_PATH }} plan -input=false -out=tfplan -var-file=dev.tfvars; then
              echo "‚úÖ Plan successful"
              break
            fi
            echo "‚ö†Ô∏è Retry in 10s..."
            sleep 10
            if [ "$i" -eq 3 ]; then
              echo "‚ùå Plan failed after 3 attempts"
              exit 1
            fi
          done
        env:
          ARM_USE_OIDC: true
          ARM_SKIP_CLI_CREDENTIAL: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------------
      # Docker Build & Push
      # -----------------------------
      - name: üê≥ Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: üèóÔ∏è Build and Push Docker Image
        run: |
          echo "üîß Building Docker image..."
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "üì¶ Pushing image to ACR..."
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # -----------------------------
      # Connect to AKS (Fixed REST Fallback)
      # -----------------------------
      - name: üéØ Get AKS Credentials (Fixed)
        env:
          AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
          AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
        run: |
          echo "üîê Connecting to AKS..."
          echo "Using cluster: $AKS_CLUSTER_NAME"
          echo "Using resource group: $AKS_RESOURCE_GROUP"

          for attempt in 1 2 3; do
            echo "‚öôÔ∏è Attempt $attempt of 3..."
            if az aks get-credentials --name "$AKS_CLUSTER_NAME" --resource-group "$AKS_RESOURCE_GROUP" --overwrite-existing --admin; then
              echo "‚úÖ Connected to AKS."
              break
            else
              echo "‚ùå Failed to connect (attempt $attempt). Trying REST fallback..."
              az rest --method get \
                --uri "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AKS_RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/${{ secrets.AKS_CLUSTER_NAME }}?api-version=2025-04-01" \
                --headers "Content-Type=application/json" \
                --output none || echo "‚ö†Ô∏è REST fallback failed, retrying..."
              if [ "$attempt" -lt 3 ]; then
                echo "‚è≥ Waiting 15 seconds..."
                sleep 15
              else
                echo "üö® All 3 attempts failed."
                exit 1
              fi
            fi
          done

      # -----------------------------
      # Verify AKS Context
      # -----------------------------
      - name: üîç Verify AKS Connection
        run: |
          echo "üîπ Current context:"
          kubectl config current-context || echo "‚ö†Ô∏è No context"
          echo "üîπ Checking nodes:"
          kubectl get nodes || echo "‚ö†Ô∏è AKS not reachable"

      # -----------------------------
      # Helm Deploy
      # -----------------------------
      - name: ‚õµ Deploy via Helm
        run: |
          echo "üöÄ Deploying Helm release..."
          helm upgrade --install $RELEASE_NAME $CHART_PATH \
            --namespace $K8S_NAMESPACE \
            --set image.repository=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --wait
          echo "‚úÖ Helm deployment done."

      # -----------------------------
      # Post Deployment Check
      # -----------------------------
      - name: ‚úÖ Verify Deployment Health
        run: |
          echo "üîé Checking rollout status..."
          kubectl rollout status deployment/$RELEASE_NAME -n $K8S_NAMESPACE --timeout=120s || true
          echo "üîπ Listing pods:"
          kubectl get pods -n $K8S_NAMESPACE -o wide
          echo "üîπ Listing services:"
          kubectl get svc -n $K8S_NAMESPACE

