name: üöÄ AKS DevOps Platform CI/CD

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write     # ‚úÖ Required for OIDC authentication
  contents: read      # ‚úÖ Needed for repo checkout

jobs:
  infra-build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: sample-app
      CHART_PATH: charts/sample-app
      RELEASE_NAME: sample-app
      K8S_NAMESPACE: default
      ENV_PATH: envs/dev        # path to Terraform environment

    steps:
      # 1Ô∏è‚É£ Checkout the repo
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Login to Azure using OIDC (no secrets.json)
      - name: üîê Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3Ô∏è‚É£ Setup Terraform
      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # 4Ô∏è‚É£ Terraform Init
      - name: ‚öôÔ∏è Terraform Init
        working-directory: ${{ env.ENV_PATH }}
        run: terraform init -input=false

      # 5Ô∏è‚É£ Terraform Validate
      - name: üß© Terraform Validate
        working-directory: ${{ env.ENV_PATH }}
        run: terraform validate

      # 6Ô∏è‚É£ Terraform Plan
      - name: ü™Ñ Terraform Plan
        working-directory: ${{ env.ENV_PATH }}
        run: terraform plan -var-file=dev.tfvars -out=tfplan

      # 7Ô∏è‚É£ Terraform Apply
      - name: üöÄ Terraform Apply
        working-directory: ${{ env.ENV_PATH }}
        run: terraform apply -auto-approve tfplan

      # 8Ô∏è‚É£ Login to ACR (via Azure CLI)
      - name: üê≥ Login to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      # 9Ô∏è‚É£ Build and Push Docker Image
      - name: üèóÔ∏è Build and Push Docker Image to ACR
        run: |
          IMAGE_TAG=${{ github.sha }}
          ACR_LOGIN_SERVER=$(az acr show --name ${{ secrets.ACR_NAME }} --query loginServer -o tsv)
          docker build -t $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:$IMAGE_TAG .
          docker push $ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }}:$IMAGE_TAG

      # üîü Get AKS Credentials
      - name: ‚ò∏Ô∏è Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      # 11Ô∏è‚É£ Deploy or Upgrade Helm Chart
      - name: ‚öôÔ∏è Helm Upgrade or Install
        run: |
          ACR_LOGIN_SERVER=$(az acr show --name ${{ secrets.ACR_NAME }} --query loginServer -o tsv)
          helm upgrade --install $RELEASE_NAME $CHART_PATH \
            --namespace $K8S_NAMESPACE \
            --create-namespace \
            --set image.repository=$ACR_LOGIN_SERVER/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --wait

