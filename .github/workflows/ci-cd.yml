name: üöÄ AKS DevOps Platform CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write   # ‚úÖ Required for Azure OIDC login
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sample-app
      CHART_PATH: charts/sample-app
      RELEASE_NAME: sample-app
      K8S_NAMESPACE: default
      ENV_PATH: envs/dev

    steps:
      # -----------------------------
      # Checkout Code
      # -----------------------------
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # -----------------------------
      # Validate Secrets Exist (Safe Bash)
      # -----------------------------
      - name: üß† Validate Required Secrets
        run: |
          echo "üîç Validating required secrets..."
          REQUIRED_SECRETS=(
            "${{ secrets.AZURE_CLIENT_ID }}"
            "${{ secrets.AZURE_TENANT_ID }}"
            "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            "${{ secrets.ACR_NAME }}"
            "${{ secrets.AKS_CLUSTER_NAME }}"
            "${{ secrets.AKS_RESOURCE_GROUP }}"
          )

          SECRET_NAMES=(
            "AZURE_CLIENT_ID"
            "AZURE_TENANT_ID"
            "AZURE_SUBSCRIPTION_ID"
            "ACR_NAME"
            "AKS_CLUSTER_NAME"
            "AKS_RESOURCE_GROUP"
          )

          MISSING=false
          for i in "${!REQUIRED_SECRETS[@]}"; do
            VALUE="${REQUIRED_SECRETS[$i]}"
            NAME="${SECRET_NAMES[$i]}"
            if [ -z "$VALUE" ]; then
              echo "‚ùå Missing secret: $NAME"
              MISSING=true
            else
              echo "‚úÖ $NAME found"
            fi
          done

          if [ "$MISSING" = true ]; then
            echo "‚ùå One or more required secrets are missing. Exiting..."
            exit 1
          fi

          echo "‚úÖ All required secrets are present."

      # -----------------------------
      # Azure Login via OIDC
      # -----------------------------
      - name: üîê Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------------
      # Setup Terraform
      # -----------------------------
      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # -----------------------------
      # Terraform Init / Plan
      # -----------------------------
      - name: ‚öôÔ∏è Terraform Init
        run: terraform -chdir=${{ env.ENV_PATH }} init -input=false
        env:
          ARM_USE_OIDC: true
          ARM_SKIP_CLI_CREDENTIAL: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üßÆ Terraform Plan
        run: terraform -chdir=${{ env.ENV_PATH }} plan -input=false -out=tfplan -var-file=dev.tfvars
        env:
          ARM_USE_OIDC: true
          ARM_SKIP_CLI_CREDENTIAL: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------------
      # Build & Push Docker Image to ACR
      # -----------------------------
      - name: üê≥ Azure Container Registry Login
        run: az acr login --name ${{ secrets.ACR_NAME }}
          
      - name: üèóÔ∏è Build and Push Docker Image
        run: |
          echo "üîß Building Docker image..."
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "üì¶ Pushing image to ACR..."
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # -----------------------------
      # Install kubelogin for AKS auth
      # -----------------------------
      - name: üß© Install kubelogin
        run: |
          echo "Installing kubelogin..."
          curl -L -o kubelogin.zip https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
          unzip kubelogin.zip -d kubelogin
          sudo mv kubelogin/bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
          sudo chmod +x /usr/local/bin/kubelogin
          kubelogin --version
          
      # -----------------------------  
      # Connect to AKS
      # -----------------------------
      - name: üéØ Get AKS Credentials
        run: |
          echo "üîê Connecting to AKS..."
          az aks get-credentials \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --overwrite-existing
        
      # -----------------------------
      # Verify AKS Connection
      # -----------------------------
      - name: üîç Verify AKS Context
        run: |
          echo "üîπ Current context:"
          kubectl config current-context || echo "‚ö†Ô∏è No context found"
          echo "üîπ Checking AKS nodes:"
          kubectl get nodes || echo "‚ö†Ô∏è AKS not reachable"
      
      # -----------------------------
      # Helm Deploy
      # -----------------------------
      - name: ‚õµ Deploy via Helm
        run: |
          echo "üöÄ Deploying Helm release..."
          helm upgrade --install $RELEASE_NAME $CHART_PATH \
            --namespace $K8S_NAMESPACE \
            --set image.repository=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }} \
            --set image.tag=latest \
            --wait
          echo "‚úÖ Helm deployment complete!"

      # -----------------------------
      # ‚úÖ Deployment Summary (Service URL)
      # -----------------------------
      - name: ‚úÖ Deployment Summary
        run: |
          echo "Deployment complete!"
          echo "Fetching service details..."
          kubectl get svc -n $K8S_NAMESPACE
          
          echo "‚è≥ Waiting for external IP..."
          for i in {1..20}; do
            EXTERNAL_IP=$(kubectl get svc -n $K8S_NAMESPACE | grep $RELEASE_NAME | awk '{print $4}')
            if [[ "$EXTERNAL_IP" != "<pending>" && "$EXTERNAL_IP" != "" ]]; then
              echo "üåê App URL: http://$EXTERNAL_IP"
              exit 0
            fi
            echo "Still waiting for external IP... ($i/20)"
            sleep 15
          done
          
          echo "‚ö†Ô∏è External IP not found yet ‚Äî check AKS LoadBalancer status."

