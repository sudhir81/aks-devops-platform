name: üöÄ AKS DevOps CI/CD (OIDC Native)

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: sample-app
      CHART_PATH: charts/sample-app
      RELEASE_NAME: sample-app
      K8S_NAMESPACE: default
      ENV_PATH: envs/dev

      # üîê Terraform + OIDC environment
      ARM_USE_OIDC: true
      ARM_SKIP_CLI_CREDENTIAL: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: ‚öôÔ∏è Terraform Init
        run: terraform -chdir=${{ env.ENV_PATH }} init -input=false

      - name: ü™Ñ Terraform Plan
        run: terraform -chdir=${{ env.ENV_PATH }} plan -var-file=dev.tfvars

      - name: üöÄ Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform -chdir=${{ env.ENV_PATH }} apply -var-file=dev.tfvars -auto-approve

      - name: üîë Login to ACR using OIDC
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: üèóÔ∏è Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ github.ref_name == 'main' && 'latest' || github.sha }}
          IMAGE_URI=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          
          echo "Building image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: ‚ò∏Ô∏è Get AKS Credentials
        uses: azure/aks-set-context@v2
        with:
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

      - name: ‚õµ Deploy via Helm
        run: |
          helm upgrade --install $RELEASE_NAME $CHART_PATH \
            --namespace $K8S_NAMESPACE \
            --set image.repository=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }} \
            --set image.tag=$(echo ${{ github.ref_name == 'main' && 'latest' || github.sha }}) \
            --wait

