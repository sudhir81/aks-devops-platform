      # -----------------------------
      # Terraform Plan
      # -----------------------------
      - name: üßÆ Terraform Plan
        run: terraform -chdir=${{ env.ENV_PATH }} plan -input=false -out=tfplan
        env:
          ARM_USE_OIDC: true
          ARM_SKIP_CLI_CREDENTIAL: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # -----------------------------
      # Build & Push Docker Image to ACR
      # -----------------------------
      - name: üê≥ Azure Container Registry Login
        run: az acr login --name ${{ secrets.ACR_NAME }}
          
      - name: üèóÔ∏è Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # -----------------------------
      # Install kubelogin for AKS auth
      # -----------------------------
      - name: üß© Install kubelogin
        run: |
          echo "Installing kubelogin..."
          curl -L -o kubelogin.zip https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
          unzip kubelogin.zip -d kubelogin
          sudo mv kubelogin/bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
          sudo chmod +x /usr/local/bin/kubelogin
          kubelogin --version

      # -----------------------------
      # Connect to AKS
      # -----------------------------
      - name: üéØ Get AKS Credentials
        run: |
          az aks get-credentials \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --overwrite-existing

      # -----------------------------
      # Verify AKS Connection
      # -----------------------------
      - name: üîç Verify AKS Context
        run: |
          kubectl config current-context || echo "‚ö†Ô∏è No context found"
          kubectl get nodes || echo "‚ö†Ô∏è AKS not reachable"

      # -----------------------------
      # Helm Deploy
      # -----------------------------
      - name: ‚õµ Deploy via Helm
        run: |
          helm upgrade --install $RELEASE_NAME $CHART_PATH \
            --namespace $K8S_NAMESPACE \
            --set image.repository=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }} \
            --set image.tag=latest \
            --wait

