name: üöÄ AKS DevOps Platform CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: sample-app
      CHART_PATH: charts/sample-app
      RELEASE_NAME: sample-app
      K8S_NAMESPACE: default
      ENV_PATH: envs/dev

      # Global Azure/Terraform OIDC variables
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    steps:
      # -----------------------------
      # Checkout Code
      # -----------------------------
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # -----------------------------
      # Validate Required Secrets
      # -----------------------------
      - name: üß† Validate Required Secrets
        run: |
          echo "üîç Validating required secrets..."
          missing=false
          for s in ARM_CLIENT_ID ARM_TENANT_ID ARM_SUBSCRIPTION_ID ACR_NAME AKS_CLUSTER_NAME AKS_RESOURCE_GROUP; do
            if [ -z "${!s}" ]; then
              echo "‚ùå Missing secret: $s"
              missing=true
            else
              echo "‚úÖ $s found"
            fi
          done
          if [ "$missing" = true ]; then
            echo "üö® One or more required secrets are missing!"
            exit 1
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ACR_NAME: ${{ secrets.ACR_NAME }}
          AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
          AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}

      # -----------------------------
      # Azure Login (OIDC)
      # -----------------------------
      - name: üîê Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      # -----------------------------
      # Ensure AKS Role Assignment
      # -----------------------------
      - name: üîë Ensure AKS Cluster Admin Role
        run: |
          SP_ID=${{ secrets.ARM_CLIENT_ID }}
          RG_NAME=${{ secrets.AKS_RESOURCE_GROUP }}
          AKS_NAME=${{ secrets.AKS_CLUSTER_NAME }}
          
          AKS_ID=$(az aks show --name "$AKS_NAME" --resource-group "$RG_NAME" --query id -o tsv)
          echo "üß© AKS Resource ID: $AKS_ID"

          ROLE_EXISTS=$(az role assignment list \
            --assignee "$SP_ID" \
            --scope "$AKS_ID" \
            --query "[?roleDefinitionName=='Azure Kubernetes Service RBAC Cluster Admin'] | length(@)" -o tsv)

          if [ "$ROLE_EXISTS" -eq 0 ]; then
            echo "‚ö†Ô∏è Assigning AKS RBAC Cluster Admin..."
            az role assignment create \
              --assignee "$SP_ID" \
              --role "Azure Kubernetes Service RBAC Cluster Admin" \
              --scope "$AKS_ID"
          else
            echo "‚úÖ Role already assigned."
          fi

      # -----------------------------
      # Setup Terraform
      # -----------------------------
      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      # -----------------------------
      # Terraform Init (with retry)
      # -----------------------------
      - name: ‚öôÔ∏è Terraform Init (with retry)
        run: |
          for i in {1..3}; do
            echo "üåÄ Attempt $i of Terraform init..."
            terraform -chdir=${{ env.ENV_PATH }} init -input=false && break
            echo "‚ö†Ô∏è Retry in 10 seconds..."
            sleep 10
            if [ $i -eq 3 ]; then
              echo "‚ùå Terraform init failed after 3 retries."
              exit 1
            fi
          done

      # -----------------------------
      # Terraform Validate
      # -----------------------------
      - name: üîç Terraform Validate
        run: terraform -chdir=${{ env.ENV_PATH }} validate

      # -----------------------------
      # Terraform Plan
      # -----------------------------
      - name: üßÆ Terraform Plan
        run: terraform -chdir=${{ env.ENV_PATH }} plan -input=false -out=tfplan -var-file=dev.tfvars

      # -----------------------------
      # Docker Build & Push
      # -----------------------------
      - name: üê≥ Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: üèóÔ∏è Build and Push Docker Image
        run: |
          echo "üîß Building Docker image..."
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "üì¶ Pushing image to ACR..."
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # -----------------------------
      # Verify AKS Exists
      # -----------------------------
      - name: üß© Verify AKS Exists
        run: |
          if ! az aks show --name ${{ secrets.AKS_CLUSTER_NAME }} --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} &>/dev/null; then
            echo "üö® AKS cluster not found! Check resource group or name."
            exit 1
          fi

      # -----------------------------
      # Connect to AKS
      # -----------------------------
      - name: üéØ Get AKS Credentials
        run: az aks get-credentials --name ${{ secrets.AKS_CLUSTER_NAME }} --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --overwrite-existing --admin

      # -----------------------------
      # Verify AKS Context
      # -----------------------------
      - name: üîç Verify AKS Connection
        run: |
          kubectl config current-context
          kubectl get nodes

      # -----------------------------
      # Helm Deploy (with rollback safety)
      # -----------------------------
      - name: ‚õµ Deploy via Helm
        run: |
          helm upgrade --install ${{ env.RELEASE_NAME }} ${{ env.CHART_PATH }} \
            --namespace ${{ env.K8S_NAMESPACE }} \
            --set image.repository=${{ secrets.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --wait --atomic

      # -----------------------------
      # Post Deployment Check
      # -----------------------------
      - name: ‚úÖ Verify Deployment Health
        run: |
          kubectl rollout status deployment/${{ env.RELEASE_NAME }} -n ${{ env.K8S_NAMESPACE }} --timeout=120s || true
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide
          kubectl get svc -n ${{ env.K8S_NAMESPACE }}
          
      # -----------------------------
      # Final Summary
      # -----------------------------
      - name: üìä Summary
        run: echo "‚úÖ CI/CD completed successfully for commit ${{ github.sha }}"
